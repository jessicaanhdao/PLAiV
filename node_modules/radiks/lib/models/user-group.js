"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keys = require("blockstack/lib/keys");

var _model = _interopRequireDefault(require("../model"));

var _groupMembership = _interopRequireDefault(require("./group-membership"));

var _groupInvitation = _interopRequireDefault(require("./group-invitation"));

var _signingKey = _interopRequireDefault(require("./signing-key"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const defaultMembers = [];

let UserGroup =
/*#__PURE__*/
function (_Model) {
  _inherits(UserGroup, _Model);

  function UserGroup(...args) {
    var _this;

    _classCallCheck(this, UserGroup);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserGroup).call(this, ...args));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "privateKey", void 0);

    return _this;
  }

  _createClass(UserGroup, [{
    key: "create",
    value: async function create() {
      const signingKey = await _signingKey.default.create({
        userGroupId: this._id
      });
      this.attrs.signingKeyId = signingKey._id;
      this.privateKey = signingKey.attrs.privateKey;
      (0, _helpers.addUserGroupKey)(this); // await this.makeGaiaConfig();

      const {
        username
      } = (0, _helpers.loadUserData)();
      const invitation = await this.makeGroupMembership(username);
      await invitation.activate();
      return this;
    }
  }, {
    key: "makeGroupMembership",
    value: async function makeGroupMembership(username) {
      let existingInviteId = null;
      this.attrs.members.forEach(member => {
        if (member.username === username) {
          existingInviteId = member.inviteId;
        }
      });

      if (existingInviteId) {
        const invitation = await _groupInvitation.default.findById(existingInviteId, {
          decrypt: false
        });
        return invitation;
      }

      const invitation = await _groupInvitation.default.makeInvitation(username, this);
      this.attrs.members.push({
        username,
        inviteId: invitation._id
      });
      await this.save();
      return invitation;
    }
  }, {
    key: "publicKey",
    value: function publicKey() {
      return (0, _keys.getPublicKeyFromPrivate)(this.privateKey);
    }
  }, {
    key: "encryptionPublicKey",
    value: async function encryptionPublicKey() {
      return this.publicKey();
    }
  }, {
    key: "encryptionPrivateKey",
    value: function encryptionPrivateKey() {
      if (this.privateKey) {
        return this.privateKey;
      }

      const {
        signingKeys
      } = (0, _helpers.userGroupKeys)();
      return signingKeys[this.attrs.signingKeyId];
    } // async makeGaiaConfig() {
    //   const userData = loadUserData();
    //   const { appPrivateKey, hubUrl } = userData;
    //   const scopes = [
    //     {
    //       scope: 'putFilePrefix',
    //       domain: `UserGroups/${this._id}/`,
    //     },
    //   ];
    //   const userSession = requireUserSession();
    //   const gaiaConfig = await userSession.connectToGaiaHub(hubUrl, appPrivateKey, scopes);
    //   this.attrs.gaiaConfig = gaiaConfig;
    //   return gaiaConfig;
    // }

  }, {
    key: "getSigningKey",
    value: function getSigningKey() {
      const {
        userGroups,
        signingKeys
      } = (0, _helpers.userGroupKeys)();
      const id = userGroups[this._id];
      const privateKey = signingKeys[id];
      return {
        privateKey,
        id
      };
    }
  }], [{
    key: "find",
    value: async function find(id) {
      const {
        userGroups,
        signingKeys
      } = _groupMembership.default.userGroupKeys();

      if (!userGroups || !userGroups[id]) {
        throw new Error(`UserGroup not found with id: '${id}'. Have you called \`GroupMembership.cacheKeys()\`?`);
      }

      const signingKey = userGroups[id];
      const privateKey = signingKeys[signingKey];
      const userGroup = new this({
        _id: id
      });
      userGroup.privateKey = privateKey;
      await userGroup.fetch();
      return userGroup;
    }
  }, {
    key: "myGroups",
    value: function myGroups() {
      const {
        userGroups
      } = (0, _helpers.userGroupKeys)();
      const keys = Object.keys(userGroups);
      return this.fetchList({
        _id: keys.join(',')
      });
    }
  }]);

  return UserGroup;
}(_model.default);

exports.default = UserGroup;

_defineProperty(UserGroup, "schema", {
  name: String,
  gaiaConfig: Object,
  members: {
    type: Array
  }
});

_defineProperty(UserGroup, "defaults", {
  members: defaultMembers
});

_defineProperty(UserGroup, "modelName", () => 'UserGroup');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,