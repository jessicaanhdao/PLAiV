"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("uuid/v4"));

var _keys = require("blockstack/lib/keys");

var _encryption = require("blockstack/lib/encryption");

var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));

var _helpers = require("./helpers");

var _api = require("./api");

var _streamer = _interopRequireDefault(require("./streamer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const EVENT_NAME = 'MODEL_STREAM_EVENT';

let Model =
/*#__PURE__*/
function () {
  _createClass(Model, null, [{
    key: "fromSchema",
    value: function fromSchema(schema) {
      this.schema = schema;
      return this;
    }
  }, {
    key: "fetchList",
    value: async function fetchList(_selector = {}, {
      decrypt = true
    } = {}) {
      const selector = _objectSpread({}, _selector, {
        radiksType: this.modelName()
      });

      const {
        results
      } = await (0, _api.find)(selector);
      const Clazz = this;
      const modelDecryptions = results.map(doc => {
        const model = new Clazz(doc);

        if (decrypt) {
          return model.decrypt();
        }

        return Promise.resolve(model);
      });
      const models = await Promise.all(modelDecryptions);
      return models;
    }
  }, {
    key: "findOne",
    value: async function findOne(_selector = {}, options = {
      decrypt: true
    }) {
      const selector = _objectSpread({}, _selector, {
        limit: 1
      });

      const results = await this.fetchList(selector, options);
      return results[0];
    }
  }, {
    key: "findById",
    value: async function findById(_id, fetchOptions) {
      const Clazz = this;
      const model = new Clazz({
        _id
      });
      return model.fetch(fetchOptions);
    }
  }, {
    key: "count",
    value: async function count(_selector = {}) {
      const selector = _objectSpread({}, _selector, {
        radiksType: this.modelName()
      });

      const data = await (0, _api.count)(selector);
      return data.total;
    }
    /**
     * Fetch all models that are owned by the current user.
     * This only includes 'personally' owned models, and not those created
     * as part of a UserGroup
     *
     * @param {Object} _selector - A query to include when fetching models
     */

  }, {
    key: "fetchOwnList",
    value: function fetchOwnList(_selector = {}) {
      const {
        _id
      } = (0, _helpers.userGroupKeys)().personal;

      const selector = _objectSpread({}, _selector, {
        signingKeyId: _id
      });

      return this.fetchList(selector);
    }
  }]);

  function Model(attrs = {}) {
    _classCallCheck(this, Model);

    _defineProperty(this, "schema", void 0);

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "attrs", void 0);

    const {
      schema,
      defaults
    } = this.constructor;
    const name = this.modelName();
    this.schema = schema;
    this._id = attrs._id || (0, _v.default)().replace('-', '');
    this.attrs = _objectSpread({}, defaults, attrs, {
      radiksType: name
    });
  }

  _createClass(Model, [{
    key: "save",
    value: async function save() {
      return new Promise(async (resolve, reject) => {
        try {
          if (this.beforeSave) {
            await this.beforeSave();
          }

          const now = new Date().getTime();
          this.attrs.createdAt = this.attrs.createdAt || now;
          this.attrs.updatedAt = now;
          await this.setUsername();
          await this.sign();
          const encrypted = await this.encrypted();
          const gaiaURL = await this.saveFile(encrypted);
          await (0, _api.sendNewGaiaUrl)(gaiaURL);
          resolve(this);
        } catch (error) {
          reject(error);
        }
      });
    }
  }, {
    key: "encrypted",
    value: function encrypted() {
      return (0, _helpers.encryptObject)(this);
    }
  }, {
    key: "saveFile",
    value: function saveFile(encrypted) {
      const userSession = (0, _helpers.requireUserSession)();
      return userSession.putFile(this.blockstackPath(), JSON.stringify(encrypted), {
        encrypt: false
      });
    }
  }, {
    key: "deleteFile",
    value: function deleteFile() {
      const userSession = (0, _helpers.requireUserSession)();
      return userSession.deleteFile(this.blockstackPath());
    }
  }, {
    key: "blockstackPath",
    value: function blockstackPath() {
      const path = `${this.modelName()}/${this._id}`;
      return path;
    }
  }, {
    key: "setUsername",
    value: function setUsername() {
      const {
        validateUsername
      } = this.constructor;

      if (validateUsername) {
        const userSession = (0, _helpers.requireUserSession)();
        const {
          username,
          gaiaHubConfig
        } = userSession.loadUserData();
        this.attrs.username = username; // eslint-disable-next-line @typescript-eslint/camelcase

        const {
          url_prefix,
          address
        } = gaiaHubConfig; // eslint-disable-next-line @typescript-eslint/camelcase

        this.attrs.gaiaURL = `${url_prefix}${address}/${this.blockstackPath()}`;
      }
    }
  }, {
    key: "fetch",
    value: async function fetch({
      decrypt = true
    } = {}) {
      const query = {
        _id: this._id
      };
      const {
        results
      } = await (0, _api.find)(query);
      const [attrs] = results; // Object not found on the server so we return undefined

      if (!attrs) {
        return undefined;
      }

      this.attrs = _objectSpread({}, this.attrs, attrs);

      if (decrypt) {
        await this.decrypt();
      }

      await this.afterFetch();
      return this;
    }
  }, {
    key: "decrypt",
    value: async function decrypt() {
      this.attrs = await (0, _helpers.decryptObject)(this.attrs, this);
      return this;
    }
  }, {
    key: "update",
    value: function update(attrs) {
      this.attrs = _objectSpread({}, this.attrs, attrs);
    }
  }, {
    key: "sign",
    value: async function sign() {
      if (this.attrs.updatable === false) {
        return true;
      }

      const signingKey = this.getSigningKey();
      this.attrs.signingKeyId = this.attrs.signingKeyId || signingKey._id;
      const {
        privateKey
      } = signingKey;
      const contentToSign = [this._id];

      if (this.attrs.updatedAt) {
        contentToSign.push(this.attrs.updatedAt);
      }

      const {
        signature
      } = (0, _encryption.signECDSA)(privateKey, contentToSign.join('-'));
      this.attrs.radiksSignature = signature;
      return this;
    }
  }, {
    key: "getSigningKey",
    value: function getSigningKey() {
      if (this.attrs.userGroupId) {
        const {
          userGroups,
          signingKeys
        } = (0, _helpers.userGroupKeys)();
        const _id = userGroups[this.attrs.userGroupId];
        const privateKey = signingKeys[_id];
        return {
          _id,
          privateKey
        };
      }

      return (0, _helpers.userGroupKeys)().personal;
    }
  }, {
    key: "encryptionPublicKey",
    value: async function encryptionPublicKey() {
      return (0, _keys.getPublicKeyFromPrivate)(this.encryptionPrivateKey());
    }
  }, {
    key: "encryptionPrivateKey",
    value: function encryptionPrivateKey() {
      let privateKey;

      if (this.attrs.userGroupId) {
        const {
          userGroups,
          signingKeys
        } = (0, _helpers.userGroupKeys)();
        privateKey = signingKeys[userGroups[this.attrs.userGroupId]];
      } else {
        privateKey = (0, _helpers.requireUserSession)().loadUserData().appPrivateKey;
      }

      return privateKey;
    }
  }, {
    key: "modelName",
    value: function modelName() {
      const {
        modelName
      } = this.constructor;
      return modelName.apply(this.constructor);
    }
  }, {
    key: "isOwnedByUser",
    value: function isOwnedByUser() {
      const keys = (0, _helpers.userGroupKeys)();

      if (this.attrs.signingKeyId === keys.personal._id) {
        return true;
      }

      if (this.attrs.userGroupId) {
        let isOwned = false;
        Object.keys(keys.userGroups).forEach(groupId => {
          if (groupId === this.attrs.userGroupId) {
            isOwned = true;
          }
        });
        return isOwned;
      }

      return false;
    }
  }, {
    key: "destroy",
    value: async function destroy() {
      await this.sign();
      await this.deleteFile();
      return (0, _api.destroyModel)(this);
    } // @abstract

  }, {
    key: "beforeSave",
    value: function beforeSave() {} // @abstract

  }, {
    key: "afterFetch",
    value: function afterFetch() {}
  }], [{
    key: "modelName",
    value: function modelName() {
      return this.className || this.name;
    }
  }, {
    key: "addStreamListener",
    value: function addStreamListener(callback) {
      if (!this.emitter) {
        this.emitter = new _wolfy87Eventemitter.default();
      }

      if (this.emitter.getListeners().length === 0) {
        _streamer.default.addListener(args => {
          this.onStreamEvent(this, args);
        });
      }

      this.emitter.addListener(EVENT_NAME, callback);
    }
  }, {
    key: "removeStreamListener",
    value: function removeStreamListener(callback) {
      this.emitter.removeListener(EVENT_NAME, callback);

      if (this.emitter.getListeners().length === 0) {
        _streamer.default.removeListener(this.onStreamEvent);
      }
    }
  }]);

  return Model;
}();

exports.default = Model;

_defineProperty(Model, "schema", void 0);

_defineProperty(Model, "defaults", {});

_defineProperty(Model, "className", void 0);

_defineProperty(Model, "emitter", void 0);

_defineProperty(Model, "validateUsername", false);

_defineProperty(Model, "onStreamEvent", (_this, [event]) => {
  try {
    const {
      data
    } = event;
    const attrs = JSON.parse(data);

    if (attrs && attrs.radiksType === _this.modelName()) {
      const model = new _this(attrs);

      if (model.isOwnedByUser()) {
        model.decrypt().then(() => {
          _this.emitter.emit(EVENT_NAME, model);
        });
      } else {
        _this.emitter.emit(EVENT_NAME, model);
      }
    }
  } catch (error) {// console.error(error.message);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,