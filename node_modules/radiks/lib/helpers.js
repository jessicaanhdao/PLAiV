"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadUserData = exports.requireUserSession = exports.addUserGroupKey = exports.addPersonalSigningKey = exports.userGroupKeys = exports.clearStorage = exports.encryptObject = exports.decryptObject = exports.GROUP_MEMBERSHIPS_STORAGE_KEY = void 0;

var _encryption = require("blockstack/lib/encryption");

var _config = require("./config");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const GROUP_MEMBERSHIPS_STORAGE_KEY = 'GROUP_MEMBERSHIPS_STORAGE_KEY';
exports.GROUP_MEMBERSHIPS_STORAGE_KEY = GROUP_MEMBERSHIPS_STORAGE_KEY;

const valueToString = (value, clazz) => {
  if (clazz === Boolean) {
    return value ? 'true' : 'false';
  }

  if (clazz === Number) {
    return String(value);
  }

  if (clazz === Array || clazz === Object) {
    return JSON.stringify(value);
  }

  return value;
};

const stringToValue = (value, clazz) => {
  if (clazz === Boolean) {
    return value === 'true';
  }

  if (clazz === Number) {
    return parseFloat(value);
  }

  if (clazz === Array || clazz === Object) {
    return JSON.parse(value);
  }

  return value;
};

const decryptObject = async (encrypted, model) => {
  const privateKey = await model.encryptionPrivateKey();

  const decrypted = _objectSpread({}, encrypted);

  const {
    schema
  } = model;
  Object.keys(encrypted).forEach(key => {
    const value = encrypted[key];
    const schemaValue = schema[key];
    let clazz = schemaValue;
    const schemaAttribute = schema[key];

    if (schemaAttribute && schemaAttribute.type) {
      clazz = schemaAttribute.type;
    }

    if (clazz && schemaAttribute && !schemaAttribute.decrypted) {
      try {
        const decryptedValue = (0, _encryption.decryptECIES)(privateKey, value);
        decrypted[key] = stringToValue(decryptedValue, clazz);
      } catch (error) {
        console.debug(`Decryption error for key: '${key}': ${error.message}`); // eslint-disable-line

        decrypted[key] = value;
      }
    }
  });
  return decrypted;
};

exports.decryptObject = decryptObject;

const encryptObject = async model => {
  const publicKey = await model.encryptionPublicKey();
  const object = model.attrs;

  const encrypted = _objectSpread({}, object, {
    _id: model._id
  });

  Object.keys(model.schema).forEach(key => {
    const schemaValue = model.schema[key];
    const schemaAttribute = model.schema[key];
    const value = object[key];
    let clazz = schemaValue;
    if (typeof value === 'undefined') return;

    if (schemaAttribute.type) {
      clazz = schemaAttribute.type;
    }

    if (schemaAttribute.decrypted) {
      encrypted[key] = value;
      return;
    }

    const stringValue = valueToString(value, clazz);
    encrypted[key] = (0, _encryption.encryptECIES)(publicKey, stringValue);
  });
  return encrypted;
};

exports.encryptObject = encryptObject;

const clearStorage = () => {
  localStorage.removeItem(GROUP_MEMBERSHIPS_STORAGE_KEY);
};

exports.clearStorage = clearStorage;

const userGroupKeys = () => {
  const keysString = localStorage.getItem(GROUP_MEMBERSHIPS_STORAGE_KEY);
  let keys = keysString ? JSON.parse(keysString) : {};
  keys = _objectSpread({
    userGroups: {},
    signingKeys: {},
    personal: {}
  }, keys);
  return keys;
};

exports.userGroupKeys = userGroupKeys;

const addPersonalSigningKey = signingKey => {
  const keys = userGroupKeys();
  keys.personal = _objectSpread({
    _id: signingKey._id
  }, signingKey.attrs);
  localStorage.setItem(GROUP_MEMBERSHIPS_STORAGE_KEY, JSON.stringify(keys));
};

exports.addPersonalSigningKey = addPersonalSigningKey;

const addUserGroupKey = userGroup => {
  const keys = userGroupKeys();
  keys.userGroups[userGroup._id] = userGroup.attrs.signingKeyId;
  keys.signingKeys[userGroup.attrs.signingKeyId] = userGroup.privateKey;
  localStorage.setItem(GROUP_MEMBERSHIPS_STORAGE_KEY, JSON.stringify(keys));
};

exports.addUserGroupKey = addUserGroupKey;

const requireUserSession = () => {
  const {
    userSession
  } = (0, _config.getConfig)();

  if (!userSession) {
    // TODO: link to docs
    throw new Error('You have not properly configured your UserSession.');
  }

  return userSession;
};

exports.requireUserSession = requireUserSession;

const loadUserData = () => {
  const {
    userSession
  } = (0, _config.getConfig)();

  if (userSession) {
    return userSession.loadUserData();
  }

  return null;
};

exports.loadUserData = loadUserData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbIkdST1VQX01FTUJFUlNISVBTX1NUT1JBR0VfS0VZIiwidmFsdWVUb1N0cmluZyIsInZhbHVlIiwiY2xhenoiLCJCb29sZWFuIiwiTnVtYmVyIiwiU3RyaW5nIiwiQXJyYXkiLCJPYmplY3QiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RyaW5nVG9WYWx1ZSIsInBhcnNlRmxvYXQiLCJwYXJzZSIsImRlY3J5cHRPYmplY3QiLCJlbmNyeXB0ZWQiLCJtb2RlbCIsInByaXZhdGVLZXkiLCJlbmNyeXB0aW9uUHJpdmF0ZUtleSIsImRlY3J5cHRlZCIsInNjaGVtYSIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2NoZW1hVmFsdWUiLCJzY2hlbWFBdHRyaWJ1dGUiLCJ0eXBlIiwiZGVjcnlwdGVkVmFsdWUiLCJlcnJvciIsImNvbnNvbGUiLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJlbmNyeXB0T2JqZWN0IiwicHVibGljS2V5IiwiZW5jcnlwdGlvblB1YmxpY0tleSIsIm9iamVjdCIsImF0dHJzIiwiX2lkIiwic3RyaW5nVmFsdWUiLCJjbGVhclN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwidXNlckdyb3VwS2V5cyIsImtleXNTdHJpbmciLCJnZXRJdGVtIiwidXNlckdyb3VwcyIsInNpZ25pbmdLZXlzIiwicGVyc29uYWwiLCJhZGRQZXJzb25hbFNpZ25pbmdLZXkiLCJzaWduaW5nS2V5Iiwic2V0SXRlbSIsImFkZFVzZXJHcm91cEtleSIsInVzZXJHcm91cCIsInNpZ25pbmdLZXlJZCIsInJlcXVpcmVVc2VyU2Vzc2lvbiIsInVzZXJTZXNzaW9uIiwiRXJyb3IiLCJsb2FkVXNlckRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBSU8sTUFBTUEsNkJBQTZCLEdBQUcsK0JBQXRDOzs7QUFFUCxNQUFNQyxhQUFhLEdBQUcsQ0FBQ0MsS0FBRCxFQUFhQyxLQUFiLEtBQTRCO0FBQ2hELE1BQUlBLEtBQUssS0FBS0MsT0FBZCxFQUF1QjtBQUNyQixXQUFPRixLQUFLLEdBQUcsTUFBSCxHQUFZLE9BQXhCO0FBQ0Q7O0FBQUMsTUFBSUMsS0FBSyxLQUFLRSxNQUFkLEVBQXNCO0FBQ3RCLFdBQU9DLE1BQU0sQ0FBQ0osS0FBRCxDQUFiO0FBQ0Q7O0FBQUMsTUFBSUMsS0FBSyxLQUFLSSxLQUFWLElBQW1CSixLQUFLLEtBQUtLLE1BQWpDLEVBQXlDO0FBQ3pDLFdBQU9DLElBQUksQ0FBQ0MsU0FBTCxDQUFlUixLQUFmLENBQVA7QUFDRDs7QUFDRCxTQUFPQSxLQUFQO0FBQ0QsQ0FURDs7QUFXQSxNQUFNUyxhQUFhLEdBQUcsQ0FBQ1QsS0FBRCxFQUFnQkMsS0FBaEIsS0FBK0I7QUFDbkQsTUFBSUEsS0FBSyxLQUFLQyxPQUFkLEVBQXVCO0FBQ3JCLFdBQU9GLEtBQUssS0FBSyxNQUFqQjtBQUNEOztBQUFDLE1BQUlDLEtBQUssS0FBS0UsTUFBZCxFQUFzQjtBQUN0QixXQUFPTyxVQUFVLENBQUNWLEtBQUQsQ0FBakI7QUFDRDs7QUFBQyxNQUFJQyxLQUFLLEtBQUtJLEtBQVYsSUFBbUJKLEtBQUssS0FBS0ssTUFBakMsRUFBeUM7QUFDekMsV0FBT0MsSUFBSSxDQUFDSSxLQUFMLENBQVdYLEtBQVgsQ0FBUDtBQUNEOztBQUNELFNBQU9BLEtBQVA7QUFDRCxDQVREOztBQVdPLE1BQU1ZLGFBQWEsR0FBRyxPQUFPQyxTQUFQLEVBQXVCQyxLQUF2QixLQUF3QztBQUNuRSxRQUFNQyxVQUFVLEdBQUcsTUFBTUQsS0FBSyxDQUFDRSxvQkFBTixFQUF6Qjs7QUFDQSxRQUFNQyxTQUFTLHFCQUNWSixTQURVLENBQWY7O0FBR0EsUUFBTTtBQUFFSyxJQUFBQTtBQUFGLE1BQWFKLEtBQW5CO0FBQ0FSLEVBQUFBLE1BQU0sQ0FBQ2EsSUFBUCxDQUFZTixTQUFaLEVBQXVCTyxPQUF2QixDQUFnQ0MsR0FBRCxJQUFTO0FBQ3RDLFVBQU1yQixLQUFLLEdBQUdhLFNBQVMsQ0FBQ1EsR0FBRCxDQUF2QjtBQUNBLFVBQU1DLFdBQVcsR0FBR0osTUFBTSxDQUFDRyxHQUFELENBQTFCO0FBQ0EsUUFBSXBCLEtBQUssR0FBR3FCLFdBQVo7QUFDQSxVQUFNQyxlQUFlLEdBQUdMLE1BQU0sQ0FBQ0csR0FBRCxDQUE5Qjs7QUFDQSxRQUFJRSxlQUFlLElBQUlBLGVBQWUsQ0FBQ0MsSUFBdkMsRUFBNkM7QUFDM0N2QixNQUFBQSxLQUFLLEdBQUdzQixlQUFlLENBQUNDLElBQXhCO0FBQ0Q7O0FBQ0QsUUFBSXZCLEtBQUssSUFBSXNCLGVBQVQsSUFBNEIsQ0FBQ0EsZUFBZSxDQUFDTixTQUFqRCxFQUE0RDtBQUMxRCxVQUFJO0FBQ0YsY0FBTVEsY0FBYyxHQUFHLDhCQUFhVixVQUFiLEVBQXlCZixLQUF6QixDQUF2QjtBQUNBaUIsUUFBQUEsU0FBUyxDQUFDSSxHQUFELENBQVQsR0FBaUJaLGFBQWEsQ0FBQ2dCLGNBQUQsRUFBaUJ4QixLQUFqQixDQUE5QjtBQUNELE9BSEQsQ0FHRSxPQUFPeUIsS0FBUCxFQUFjO0FBQ2RDLFFBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFlLDhCQUE2QlAsR0FBSSxNQUFLSyxLQUFLLENBQUNHLE9BQVEsRUFBbkUsRUFEYyxDQUN5RDs7QUFDdkVaLFFBQUFBLFNBQVMsQ0FBQ0ksR0FBRCxDQUFULEdBQWlCckIsS0FBakI7QUFDRDtBQUNGO0FBQ0YsR0FqQkQ7QUFrQkEsU0FBT2lCLFNBQVA7QUFDRCxDQXpCTTs7OztBQTJCQSxNQUFNYSxhQUFhLEdBQUcsTUFBT2hCLEtBQVAsSUFBd0I7QUFDbkQsUUFBTWlCLFNBQVMsR0FBRyxNQUFNakIsS0FBSyxDQUFDa0IsbUJBQU4sRUFBeEI7QUFDQSxRQUFNQyxNQUFNLEdBQUduQixLQUFLLENBQUNvQixLQUFyQjs7QUFDQSxRQUFNckIsU0FBUyxxQkFDVm9CLE1BRFU7QUFFYkUsSUFBQUEsR0FBRyxFQUFFckIsS0FBSyxDQUFDcUI7QUFGRSxJQUFmOztBQUlBN0IsRUFBQUEsTUFBTSxDQUFDYSxJQUFQLENBQVlMLEtBQUssQ0FBQ0ksTUFBbEIsRUFBMEJFLE9BQTFCLENBQW1DQyxHQUFELElBQVM7QUFDekMsVUFBTUMsV0FBVyxHQUFHUixLQUFLLENBQUNJLE1BQU4sQ0FBYUcsR0FBYixDQUFwQjtBQUNBLFVBQU1FLGVBQWUsR0FBR1QsS0FBSyxDQUFDSSxNQUFOLENBQWFHLEdBQWIsQ0FBeEI7QUFDQSxVQUFNckIsS0FBSyxHQUFHaUMsTUFBTSxDQUFDWixHQUFELENBQXBCO0FBQ0EsUUFBSXBCLEtBQUssR0FBR3FCLFdBQVo7QUFDQSxRQUFJLE9BQU90QixLQUFQLEtBQWlCLFdBQXJCLEVBQWtDOztBQUNsQyxRQUFJdUIsZUFBZSxDQUFDQyxJQUFwQixFQUEwQjtBQUN4QnZCLE1BQUFBLEtBQUssR0FBR3NCLGVBQWUsQ0FBQ0MsSUFBeEI7QUFDRDs7QUFDRCxRQUFJRCxlQUFlLENBQUNOLFNBQXBCLEVBQStCO0FBQzdCSixNQUFBQSxTQUFTLENBQUNRLEdBQUQsQ0FBVCxHQUFpQnJCLEtBQWpCO0FBQ0E7QUFDRDs7QUFDRCxVQUFNb0MsV0FBVyxHQUFHckMsYUFBYSxDQUFDQyxLQUFELEVBQVFDLEtBQVIsQ0FBakM7QUFDQVksSUFBQUEsU0FBUyxDQUFDUSxHQUFELENBQVQsR0FBaUIsOEJBQWFVLFNBQWIsRUFBd0JLLFdBQXhCLENBQWpCO0FBQ0QsR0FmRDtBQWdCQSxTQUFPdkIsU0FBUDtBQUNELENBeEJNOzs7O0FBMEJBLE1BQU13QixZQUFZLEdBQUcsTUFBTTtBQUNoQ0MsRUFBQUEsWUFBWSxDQUFDQyxVQUFiLENBQXdCekMsNkJBQXhCO0FBQ0QsQ0FGTTs7OztBQUlBLE1BQU0wQyxhQUFhLEdBQUcsTUFBTTtBQUNqQyxRQUFNQyxVQUFVLEdBQUdILFlBQVksQ0FBQ0ksT0FBYixDQUFxQjVDLDZCQUFyQixDQUFuQjtBQUNBLE1BQUlxQixJQUFJLEdBQUdzQixVQUFVLEdBQUdsQyxJQUFJLENBQUNJLEtBQUwsQ0FBVzhCLFVBQVgsQ0FBSCxHQUE0QixFQUFqRDtBQUNBdEIsRUFBQUEsSUFBSTtBQUNGd0IsSUFBQUEsVUFBVSxFQUFFLEVBRFY7QUFFRkMsSUFBQUEsV0FBVyxFQUFFLEVBRlg7QUFHRkMsSUFBQUEsUUFBUSxFQUFFO0FBSFIsS0FJQzFCLElBSkQsQ0FBSjtBQU1BLFNBQU9BLElBQVA7QUFDRCxDQVZNOzs7O0FBWUEsTUFBTTJCLHFCQUFxQixHQUFJQyxVQUFELElBQWdCO0FBQ25ELFFBQU01QixJQUFJLEdBQUdxQixhQUFhLEVBQTFCO0FBQ0FyQixFQUFBQSxJQUFJLENBQUMwQixRQUFMO0FBQ0VWLElBQUFBLEdBQUcsRUFBRVksVUFBVSxDQUFDWjtBQURsQixLQUVLWSxVQUFVLENBQUNiLEtBRmhCO0FBSUFJLEVBQUFBLFlBQVksQ0FBQ1UsT0FBYixDQUFxQmxELDZCQUFyQixFQUFvRFMsSUFBSSxDQUFDQyxTQUFMLENBQWVXLElBQWYsQ0FBcEQ7QUFDRCxDQVBNOzs7O0FBU0EsTUFBTThCLGVBQWUsR0FBSUMsU0FBRCxJQUFlO0FBQzVDLFFBQU0vQixJQUFJLEdBQUdxQixhQUFhLEVBQTFCO0FBQ0FyQixFQUFBQSxJQUFJLENBQUN3QixVQUFMLENBQWdCTyxTQUFTLENBQUNmLEdBQTFCLElBQWlDZSxTQUFTLENBQUNoQixLQUFWLENBQWdCaUIsWUFBakQ7QUFDQWhDLEVBQUFBLElBQUksQ0FBQ3lCLFdBQUwsQ0FBaUJNLFNBQVMsQ0FBQ2hCLEtBQVYsQ0FBZ0JpQixZQUFqQyxJQUFpREQsU0FBUyxDQUFDbkMsVUFBM0Q7QUFDQXVCLEVBQUFBLFlBQVksQ0FBQ1UsT0FBYixDQUFxQmxELDZCQUFyQixFQUFvRFMsSUFBSSxDQUFDQyxTQUFMLENBQWVXLElBQWYsQ0FBcEQ7QUFDRCxDQUxNOzs7O0FBT0EsTUFBTWlDLGtCQUFrQixHQUFHLE1BQU07QUFDdEMsUUFBTTtBQUFFQyxJQUFBQTtBQUFGLE1BQWtCLHdCQUF4Qjs7QUFDQSxNQUFJLENBQUNBLFdBQUwsRUFBa0I7QUFDaEI7QUFDQSxVQUFNLElBQUlDLEtBQUosQ0FBVSxvREFBVixDQUFOO0FBQ0Q7O0FBQ0QsU0FBT0QsV0FBUDtBQUNELENBUE07Ozs7QUFTQSxNQUFNRSxZQUFZLEdBQUcsTUFBTTtBQUNoQyxRQUFNO0FBQUVGLElBQUFBO0FBQUYsTUFBa0Isd0JBQXhCOztBQUNBLE1BQUlBLFdBQUosRUFBaUI7QUFDZixXQUFPQSxXQUFXLENBQUNFLFlBQVosRUFBUDtBQUNEOztBQUNELFNBQU8sSUFBUDtBQUNELENBTk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNyeXB0RUNJRVMsIGRlY3J5cHRFQ0lFUyB9IGZyb20gJ2Jsb2Nrc3RhY2svbGliL2VuY3J5cHRpb24nO1xuaW1wb3J0IHsgZ2V0Q29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IE1vZGVsIGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHsgU2NoZW1hQXR0cmlidXRlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBHUk9VUF9NRU1CRVJTSElQU19TVE9SQUdFX0tFWSA9ICdHUk9VUF9NRU1CRVJTSElQU19TVE9SQUdFX0tFWSc7XG5cbmNvbnN0IHZhbHVlVG9TdHJpbmcgPSAodmFsdWU6IGFueSwgY2xheno6IGFueSkgPT4ge1xuICBpZiAoY2xhenogPT09IEJvb2xlYW4pIHtcbiAgICByZXR1cm4gdmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICB9IGlmIChjbGF6eiA9PT0gTnVtYmVyKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH0gaWYgKGNsYXp6ID09PSBBcnJheSB8fCBjbGF6eiA9PT0gT2JqZWN0KSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5jb25zdCBzdHJpbmdUb1ZhbHVlID0gKHZhbHVlOiBzdHJpbmcsIGNsYXp6OiBhbnkpID0+IHtcbiAgaWYgKGNsYXp6ID09PSBCb29sZWFuKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAndHJ1ZSc7XG4gIH0gaWYgKGNsYXp6ID09PSBOdW1iZXIpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0gaWYgKGNsYXp6ID09PSBBcnJheSB8fCBjbGF6eiA9PT0gT2JqZWN0KSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWNyeXB0T2JqZWN0ID0gYXN5bmMgKGVuY3J5cHRlZDogYW55LCBtb2RlbDogTW9kZWwpID0+IHtcbiAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IG1vZGVsLmVuY3J5cHRpb25Qcml2YXRlS2V5KCk7XG4gIGNvbnN0IGRlY3J5cHRlZCA9IHtcbiAgICAuLi5lbmNyeXB0ZWQsXG4gIH07XG4gIGNvbnN0IHsgc2NoZW1hIH0gPSBtb2RlbDtcbiAgT2JqZWN0LmtleXMoZW5jcnlwdGVkKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGVuY3J5cHRlZFtrZXldO1xuICAgIGNvbnN0IHNjaGVtYVZhbHVlID0gc2NoZW1hW2tleV07XG4gICAgbGV0IGNsYXp6ID0gc2NoZW1hVmFsdWU7XG4gICAgY29uc3Qgc2NoZW1hQXR0cmlidXRlID0gc2NoZW1hW2tleV0gYXMgU2NoZW1hQXR0cmlidXRlO1xuICAgIGlmIChzY2hlbWFBdHRyaWJ1dGUgJiYgc2NoZW1hQXR0cmlidXRlLnR5cGUpIHtcbiAgICAgIGNsYXp6ID0gc2NoZW1hQXR0cmlidXRlLnR5cGU7XG4gICAgfVxuICAgIGlmIChjbGF6eiAmJiBzY2hlbWFBdHRyaWJ1dGUgJiYgIXNjaGVtYUF0dHJpYnV0ZS5kZWNyeXB0ZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY3J5cHRlZFZhbHVlID0gZGVjcnlwdEVDSUVTKHByaXZhdGVLZXksIHZhbHVlKSBhcyBzdHJpbmc7XG4gICAgICAgIGRlY3J5cHRlZFtrZXldID0gc3RyaW5nVG9WYWx1ZShkZWNyeXB0ZWRWYWx1ZSwgY2xhenopO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgRGVjcnlwdGlvbiBlcnJvciBmb3Iga2V5OiAnJHtrZXl9JzogJHtlcnJvci5tZXNzYWdlfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGRlY3J5cHRlZFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlY3J5cHRlZDtcbn07XG5cbmV4cG9ydCBjb25zdCBlbmNyeXB0T2JqZWN0ID0gYXN5bmMgKG1vZGVsOiBNb2RlbCkgPT4ge1xuICBjb25zdCBwdWJsaWNLZXkgPSBhd2FpdCBtb2RlbC5lbmNyeXB0aW9uUHVibGljS2V5KCk7XG4gIGNvbnN0IG9iamVjdCA9IG1vZGVsLmF0dHJzO1xuICBjb25zdCBlbmNyeXB0ZWQgPSB7XG4gICAgLi4ub2JqZWN0LFxuICAgIF9pZDogbW9kZWwuX2lkLFxuICB9O1xuICBPYmplY3Qua2V5cyhtb2RlbC5zY2hlbWEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IHNjaGVtYVZhbHVlID0gbW9kZWwuc2NoZW1hW2tleV07XG4gICAgY29uc3Qgc2NoZW1hQXR0cmlidXRlID0gbW9kZWwuc2NoZW1hW2tleV0gYXMgU2NoZW1hQXR0cmlidXRlO1xuICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgbGV0IGNsYXp6ID0gc2NoZW1hVmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBpZiAoc2NoZW1hQXR0cmlidXRlLnR5cGUpIHtcbiAgICAgIGNsYXp6ID0gc2NoZW1hQXR0cmlidXRlLnR5cGU7XG4gICAgfVxuICAgIGlmIChzY2hlbWFBdHRyaWJ1dGUuZGVjcnlwdGVkKSB7XG4gICAgICBlbmNyeXB0ZWRba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdHJpbmdWYWx1ZSA9IHZhbHVlVG9TdHJpbmcodmFsdWUsIGNsYXp6KTtcbiAgICBlbmNyeXB0ZWRba2V5XSA9IGVuY3J5cHRFQ0lFUyhwdWJsaWNLZXksIHN0cmluZ1ZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiBlbmNyeXB0ZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgY2xlYXJTdG9yYWdlID0gKCkgPT4ge1xuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShHUk9VUF9NRU1CRVJTSElQU19TVE9SQUdFX0tFWSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlckdyb3VwS2V5cyA9ICgpID0+IHtcbiAgY29uc3Qga2V5c1N0cmluZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKEdST1VQX01FTUJFUlNISVBTX1NUT1JBR0VfS0VZKTtcbiAgbGV0IGtleXMgPSBrZXlzU3RyaW5nID8gSlNPTi5wYXJzZShrZXlzU3RyaW5nKSA6IHt9O1xuICBrZXlzID0ge1xuICAgIHVzZXJHcm91cHM6IHt9LFxuICAgIHNpZ25pbmdLZXlzOiB7fSxcbiAgICBwZXJzb25hbDoge30sXG4gICAgLi4ua2V5cyxcbiAgfTtcbiAgcmV0dXJuIGtleXM7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkUGVyc29uYWxTaWduaW5nS2V5ID0gKHNpZ25pbmdLZXkpID0+IHtcbiAgY29uc3Qga2V5cyA9IHVzZXJHcm91cEtleXMoKTtcbiAga2V5cy5wZXJzb25hbCA9IHtcbiAgICBfaWQ6IHNpZ25pbmdLZXkuX2lkLFxuICAgIC4uLnNpZ25pbmdLZXkuYXR0cnMsXG4gIH07XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKEdST1VQX01FTUJFUlNISVBTX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShrZXlzKSk7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkVXNlckdyb3VwS2V5ID0gKHVzZXJHcm91cCkgPT4ge1xuICBjb25zdCBrZXlzID0gdXNlckdyb3VwS2V5cygpO1xuICBrZXlzLnVzZXJHcm91cHNbdXNlckdyb3VwLl9pZF0gPSB1c2VyR3JvdXAuYXR0cnMuc2lnbmluZ0tleUlkO1xuICBrZXlzLnNpZ25pbmdLZXlzW3VzZXJHcm91cC5hdHRycy5zaWduaW5nS2V5SWRdID0gdXNlckdyb3VwLnByaXZhdGVLZXk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKEdST1VQX01FTUJFUlNISVBTX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShrZXlzKSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVxdWlyZVVzZXJTZXNzaW9uID0gKCkgPT4ge1xuICBjb25zdCB7IHVzZXJTZXNzaW9uIH0gPSBnZXRDb25maWcoKTtcbiAgaWYgKCF1c2VyU2Vzc2lvbikge1xuICAgIC8vIFRPRE86IGxpbmsgdG8gZG9jc1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IGhhdmUgbm90IHByb3Blcmx5IGNvbmZpZ3VyZWQgeW91ciBVc2VyU2Vzc2lvbi4nKTtcbiAgfVxuICByZXR1cm4gdXNlclNlc3Npb247XG59O1xuXG5leHBvcnQgY29uc3QgbG9hZFVzZXJEYXRhID0gKCkgPT4ge1xuICBjb25zdCB7IHVzZXJTZXNzaW9uIH0gPSBnZXRDb25maWcoKTtcbiAgaWYgKHVzZXJTZXNzaW9uKSB7XG4gICAgcmV0dXJuIHVzZXJTZXNzaW9uLmxvYWRVc2VyRGF0YSgpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiJdfQ==