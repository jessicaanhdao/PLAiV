"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _queryToMongo = _interopRequireDefault(require("query-to-mongo"));

var _express2 = require("@awaitjs/express");

var _ec = require("blockstack/lib/encryption/ec");

var _validator = _interopRequireDefault(require("../lib/validator"));

var _constants = _interopRequireDefault(require("../lib/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const makeModelsController = (radiksCollection, config, emitter) => {
  const ModelsController = (0, _express2.addAsync)(_express.default.Router());
  ModelsController.use(_bodyParser.default.json());
  ModelsController.postAsync('/crawl', async (req, res) => {
    const {
      gaiaURL
    } = req.body;
    const attrs = await (0, _requestPromise.default)({
      uri: gaiaURL,
      json: true
    });
    const validator = new _validator.default(radiksCollection, attrs, gaiaURL);

    try {
      await validator.validate();
      await radiksCollection.save(attrs);
      emitter.emit(_constants.default.STREAM_CRAWL_EVENT, [attrs]);
      res.json({
        success: true
      });
    } catch (error) {
      console.error(error);
      res.status(400).json({
        success: false,
        message: error.message
      });
    }
  });
  ModelsController.getAsync('/find', async (req, res) => {
    const mongo = (0, _queryToMongo.default)(req.query, {
      maxLimit: config.maxLimit
    });
    const cursor = radiksCollection.find(mongo.criteria, mongo.options);
    const results = await cursor.toArray();
    const total = await cursor.count();
    const fullUrl = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
    const pageLinks = mongo.links(fullUrl.split('?')[0], total);
    res.json(_objectSpread2({}, pageLinks, {
      total,
      results
    }));
  });
  ModelsController.getAsync('/count', async (req, res) => {
    const mongo = (0, _queryToMongo.default)(req.query, {
      maxLimit: config.maxLimit
    });
    const total = await radiksCollection.countDocuments(mongo.criteria, mongo.options);
    res.json({
      total
    });
  });
  ModelsController.getAsync('/:id', async (req, res) => {
    const {
      id
    } = req.params;
    const doc = await radiksCollection.findOne({
      _id: id
    });
    res.json(doc);
  });
  ModelsController.deleteAsync('/:id', async (req, res) => {
    try {
      const attrs = await radiksCollection.findOne({
        _id: req.params.id
      });
      const {
        publicKey
      } = await radiksCollection.findOne({
        _id: attrs.signingKeyId,
        radiksType: 'SigningKey'
      });
      const message = `${attrs._id}-${attrs.updatedAt}`;

      if ((0, _ec.verifyECDSA)(message, publicKey, req.query.signature)) {
        await radiksCollection.deleteOne({
          _id: req.params.id
        });
        return res.json({
          success: true
        });
      }
    } catch (error) {
      console.error(error);
    }

    return res.json({
      success: false,
      error: 'Invalid signature'
    });
  });
  return ModelsController;
};

var _default = makeModelsController;
exports.default = _default;
module.exports = exports.default;