"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _encryption = require("blockstack/lib/encryption");

var _express2 = require("@awaitjs/express");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (radiksCollection, centralCollection) => {
  const CentralController = (0, _express2.addAsync)(_express.default.Router());
  CentralController.use(_bodyParser.default.json());
  CentralController.postAsync('/', async (req, res) => {
    const {
      key,
      value,
      signature,
      username
    } = req.body;
    const {
      publicKey
    } = await radiksCollection.findOne({
      username,
      radiksType: 'BlockstackUser'
    });
    const _id = `${username}-${key}`;

    if ((0, _encryption.verifyECDSA)(_id, publicKey, signature)) {
      await centralCollection.updateOne({
        _id
      }, {
        $set: value
      }, {
        upsert: true
      });
      return res.json({
        success: true
      });
    }

    return res.status(400).json({
      success: false
    });
  });
  CentralController.getAsync('/:key', async (req, res) => {
    const {
      username,
      signature
    } = req.query;
    const {
      key
    } = req.params;
    const _id = `${username}-${key}`;
    const {
      publicKey
    } = await radiksCollection.findOne({
      username,
      radiksType: 'BlockstackUser'
    });

    if ((0, _encryption.verifyECDSA)(_id, publicKey, signature)) {
      const value = await centralCollection.findOne({
        _id
      });
      return res.json(value);
    }

    return res.status(400).json({
      success: false
    });
  });
  return CentralController;
};

exports.default = _default;
module.exports = exports.default;